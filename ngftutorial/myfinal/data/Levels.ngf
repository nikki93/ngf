ngflevel Level1
{
	object
	{
		type LevelGeometry
		name noname
		position 86.459045 -47.477589 14.741463
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			brushMeshFile Level1_b0.mesh
		}
	}
	object
	{
		type LevelGeometry
		name noname
		position 1.500000 -30.963762 -0.500000
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			brushMeshFile Level1_b1.mesh
		}
	}
	object
	{
		type Player
		name noname
		position 0.500000 0.500000 -0.500000
		rotation 1.000000 0.000000 0.000000 -0.000000
	}
	object
	{
		type LevelGeometry
		name noname
		position 6.500000 -34.405964 48.741463
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			brushMeshFile Level1_b2.mesh
		}
	}
}

ngflevel TestLevel
{
	object
	{
		type LevelGeometry
		name noname
		position -1.422098 2.033171 -1.879105
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			brushMeshFile TestLevel_b0.mesh
		}
	}
	object
	{
		type LevelGeometry
		name noname
		position 4.077902 3.533171 -13.379105
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			brushMeshFile TestLevel_b1.mesh
		}
	}
	object
	{
		type Player
		name thePlayer
		position -11.565125 10.132193 -8.784897
		rotation 1.000000 0.000000 0.000000 -0.000000

		properties
		{
			script : import Ngf
			       : 
			       : def create(self):
			       : 	self.m_time = 0
			       : 	self.m_bounced = False
			       : 	
			       : 	print "Health is:", self.p_health
			       : 	self.p_health = 440	
			       : 	
			       : def utick(self, elapsed):
			       : 	#If the time is more than 10 and we haven't
			       : 	#jumped, we jump. Otherwise, time flies. :-)
			       : 	if ((self.m_time > 10) and (not self.m_bounced)):
			       : 		self.applyImpulse(Ngf.Vector3(0,100,0))
			       : 		self.m_bounced = True
			       : 		print "Impulsed!"
			       : 	else:
			       : 		self.m_time += elapsed
			       : 		
			       : def collide(self, other):
			       : 	other.p_testVar = 720;
			       : 
		}
	}
}

